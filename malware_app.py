import streamlit as st
from PIL import Image
import os
import pickle
import numpy as np
from tensorflow.keras.models import load_model

# Load the trained malware analysis model
model = load_model('malware_model.h5')

# Load the label encoder
with open('label_encoder.pkl', 'rb') as f:
    label_encoder = pickle.load(f)

# Define the file upload function
def analyze_file(file):
    # Preprocess the file
    file_features = preprocess_file(file)

    # Make the prediction
    prediction = model.predict(file_features)
    predicted_label = label_encoder.inverse_transform([np.argmax(prediction)])[0]

    return predicted_label

# Preprocess the file (placeholder)
def preprocess_file(file):
    # Implement your file preprocessing logic here
    # This could include feature extraction, normalization, etc.
    file_features = np.random.rand(1, 100)
    return file_features

# Define the Streamlit app
def main():
    st.set_page_config(page_title="Intelligent Malware Analyzer 🕸️", page_icon="🦠")

    st.title("Intelligent Malware Analyzer 🦠")
    st.markdown("Analyze files for potential malware using our cutting-edge AI technology. 💻")

    # File upload
    uploaded_file = st.file_uploader("Choose a file to analyze 📁", type=['exe', 'dll', 'apk', 'pdf'])

    if uploaded_file is not None:
        # Display the uploaded file
        st.markdown(f"You uploaded: **{uploaded_file.name}** 📤")
        st.image(Image.open(uploaded_file), caption=f"Preview of {uploaded_file.name}", use_column_width=True)

        # Analyze the file
        with st.spinner("Analyzing the file... 🔍"):
            predicted_label = analyze_file(uploaded_file)

        # Display the results
        if predicted_label == "benign":
            st.success(f"The file is **benign** 👍")
        else:
            st.error(f"The file is potentially **malicious** 🚨 ({predicted_label})")

        st.markdown("Thank you for using our Intelligent Malware Analyzer! 🙏")

if __name__ == "__main__":
    main()
